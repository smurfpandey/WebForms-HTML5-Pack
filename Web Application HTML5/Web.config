<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
    <system.web>
        <compilation debug="true" targetFramework="4.5" />

        <!-- Security through obscurity, removes  X-AspNet-Version HTTP header from the response -->
        <httpRuntime targetFramework="4.5" enableVersionHeader="false" />

        <customErrors mode="RemoteOnly">
            <error statusCode="404" redirect="~/404.aspx" />
        </customErrors>
    </system.web>
    <system.webServer>
        <httpProtocol>
            <customHeaders>
                <!--#### SECURITY Related Headers ###
			      More information: https://www.owasp.org/index.php/List_of_useful_HTTP_headers
		        -->
                <!--
                # Access-Control-Allow-Origin
                The 'Access Control Allow Origin' HTTP header is used to control which
                sites are allowed to bypass same origin policies and send cross-origin requests.

                Secure configuration: Either do not set this header, or return the 'Access-Control-Allow-Origin'
                header restricting it to only a trusted set of sites.
                http://enable-cors.org/

                <add name="Access-Control-Allow-Origin" value="*" />
                -->
                <!-- A little extra security (by obscurity), removings fun but adding your own is better -->
                <remove name="X-Powered-By" />
                <add name="X-Powered-By" value="My Little Pony" />

                <!--
                With Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
		            you can tell the browser that it can only download content from the domains you explicitly allow
		            CSP can be quite difficult to configure, and cause real issues if you get it wrong
		            There is website that helps you generate a policy here http://cspisawesome.com/
		            <add name="Content-Security-Policy" "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' https://www.google-analytics.com;" />
                -->

                <!--//#### SECURITY Related Headers ###-->

                <!--
                    # E-TAGS
                    E-Tags are actually quite useful in cache management especially if you have a front-end caching server
                    such as Varnish. http://en.wikipedia.org/wiki/HTTP_ETag / http://developer.yahoo.com/performance/rules.html#etags
                    But in load balancing and simply most cases ETags are mishandled in IIS; and it can be advantageous to remove them.
                    This is simply done by overriding the default server header with an empty tag.
                    See http://bytestopshere.wordpress.com/2009/02/02/disable-remove-etags-on-iis-6-to-improve-performance/

                    <add name="ETAG" value="" />
                    -->

                <!--
                    Force the latest IE version, in various cases when it may fall back to IE7 mode
                    github.com/rails/rails/commit/123eb25#commitcomment-118920
                    Use ChromeFrame if it's installed for a better experience for the poor IE folk
                    -->
                <add name="X-UA-Compatible" value="IE=Edge,chrome=1" />
            </customHeaders>
        </httpProtocol>

        <!-- Security through obscurity, handle denied directory listing -->
        <httpErrors errorMode="Custom">
            <error statusCode="403" subStatusCode="14" path="/404.aspx" responseMode="ExecuteURL"/>
        </httpErrors>
    </system.webServer>
</configuration>
